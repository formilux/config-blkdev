#!/bin/bash

# This script saves /etc onto the flash and writes a signature so that
# it will be able to check whether files have changed next time.

# get out of /flash and /etc just in case.
OLDDIR="$PWD"
cd /

export PATH=/bin:/sbin:/usr/bin:/usr/sbin
FLASHDIR=/flash
FLASHCFG=$FLASHDIR/cfg
FILE=/etc/.restored
EXCLUDE=/usr/share/factory/ignore-files
REFERENCE=/usr/share/factory/base-etc
FORCE=0
VERBOSE=0
STDOUT=0
QUIET=0
DIFF=0
LIST=0
TOFILE=0
TONET=0
PROG="${0##*/}"

# Mounts the flash reaw/write in $FLASHDIR.
# This checks /proc/cmdline for the LAST 'flash=' statement, and
# uses its value as a /dev entry to mount it read-only into $FLASHDIR.
# Returns 0 if OK, 1 otherwise.
# DOES NOT unmounts $FLASHDIR first if previously mounted, but returns with
# an error indicating a resource access conflict.
mount_flash_rw() {
  local flash


  unset FLASH_MBR FLASH_HW FLASH_SW

  if [ -s /var/state/flash-layout.rc ]; then
    . /var/state/flash-layout.rc
  fi

  if [ -z "$FLASH_SW" ]; then
    if [ -x /sbin/mk-flash-layout ]; then
      /sbin/mk-flash-layout
      if [ -s /var/state/flash-layout.rc ]; then
        . /var/state/flash-layout.rc
      fi
    fi
  fi

  if [ -z "$FLASH_SW" ]; then
    flash="$(cat /proc/cmdline)"
    if [ -n "${flash##*flash=*}" ]; then
      [ $QUIET -eq 0 ] && echo "No flash device specified in /proc/cmdline."
      return 1
    fi
    flash=${flash##*flash=}
    flash=${flash%% *}
    [ -n "${flash##/dev/*}" ] && flash="/dev/$flash"
  else
    flash=$FLASH_SW
  fi

  [ $QUIET -eq 0 ] && echo "Mounting ${flash} on $FLASHDIR..."
  if ! mount -w $flash $FLASHDIR >/dev/null 2>&1; then
    rm -f /etc/blkid.tab{,.old} >/dev/null 2>&1
    [ $QUIET -eq 0 ] && echo "Error: mount failed."
    return 1
  fi
  rm -f /etc/blkid.tab{,.old} >/dev/null 2>&1
  return 0
}

# unmounts /flash
umount_flash() {
  if ! umount -d $FLASHDIR >/dev/null 2>&1; then
    cd /
    if ! umount -d $FLASHDIR >/dev/null 2>&1; then
      [ $QUIET -eq 0 ] && echo "Error: cannot unmount $FLASHDIR"
      return 1
    else
      [ $QUIET -eq 0 ] && echo "Warning: ${0##*/} forgot to leave $FLASHDIR before unmounting it."
    fi
  fi
  return 0
}

# Usage: $0 <step> <message>|<status>
write_journal()
{
  local date product model version tty
  local step="$1"
  local message="$2"

  date=$(date +"%Y/%m/%d %H:%M:%S")
  if /bin/tty -s; then
    tty=$(/bin/tty 2>/dev/null)
    tty=${tty#/dev/}
  else
    tty="none"
  fi

  set -- $(grep "^Product:" /usr/share/factory/version); product="$2"
  set -- $(grep "^Model:" /usr/share/factory/version); model="$2"
  set -- $(grep "^Version:" /usr/share/factory/version); version="$2"

  echo "$date $product $model $version $tty $PROG: $step: $message" >> "$FLASHDIR/.journal" 2>/dev/null
  chattr +a "$FLASHDIR/.journal" >/dev/null 2>&1
}

# makes an archive from files in /etc which differ from the factory config,
# except for directories and the files we don't want to save, then exports
# it to stdout.
archive_etc() {
  flx check --ignore-dot --ignore-link --ignore-date $REFERENCE=etc /etc=etc \
    | awk '/^[+>]/ { print $9 }' \
    | tar -C / -T - --one-file-system --numeric-owner --no-recursion --exclude-from $EXCLUDE -cf - \
    | gzip -c9
}

# emits a diff between factory and /etc on stdout.
diff_etc() {
  flx check --ignore-dot --ignore-link --ignore-date $REFERENCE=etc /etc=etc \
    | awk '/^. [^d]/ { print $9 }' | sort -u \
    | while read; do
        grep -qxF "$REPLY" "$EXCLUDE" && continue
        diff --label="factory/${REPLY}" --label="running/${REPLY}" -puN "${REFERENCE}${REPLY#etc}" "/etc${REPLY#etc}"
      done
}

# creates a secure empty temporary directory and returns its full path name.
# Returns 0 if it succeeds, with the name on stdout, otherwise returns 1.
mkstemp() {
  local name attempts=10
  while [ $attempts -gt 0 ]; do
    name="${TMPDIR-/tmp}/$$.$RANDOM.$attempts"
    if mkdir -m 0700 $name >/dev/null 2>/dev/null; then
      echo "$name"
      return 0
    fi
    rmdir $name >/dev/null 2>/dev/null
    ((attempts--))
  done
  return 1
}

# Checks what has changed since last backup. We need to use 'tar cf' because
# we want to benefit from tar's ability to exclude files from another file.
# The changed files are listed on stdout, relative to /.
# WARNING! because it uses tar, it does not detect removed files.
list_changes() {
  if [ -r "$FILE" ]; then
    flx check --ignore-dot --ignore-link --ignore-date file:$FILE fs:/etc \
      | awk '/^[+>]/ { print $9 }' \
      | tar -C / -T - --one-file-system --numeric-owner --no-recursion --exclude-from $EXCLUDE -cvf /dev/null 2>/dev/null
  else
      tar -C / --one-file-system --numeric-owner --exclude-from $EXCLUDE -cvf /dev/null etc 2>/dev/null
  fi
}

# kills the program and outputs an error if provided.
function die {
    local ret="$1"
    shift
    [ -n "$*" ] && echo "$@" >&2
    exit $ret
}

#  
# main
#

while [ $# -gt 0 ]; do
  if [ ".$1" = ".-f" ]; then FORCE=1
  elif [ ".$1" = ".-v" ]; then VERBOSE=1
  elif [ ".$1" = ".-q" ]; then QUIET=1
  elif [ ".$1" = ".-s" ]; then STDOUT=1
  elif [ ".$1" = ".-l" ]; then LIST=1
  elif [ ".$1" = ".-d" ]; then DIFF=1
  elif [ ".$1" = ".-o" -a -n "$2" ]; then
    TOFILE=1
    OUTFILE="$2"
    [ -n "${OUTFILE##/*}" ] && OUTFILE="$OLDDIR/$OUTFILE"
    shift
  elif [ ".$1" = ".-p" -a -n "$2" ]; then
    TONET=1
    OUTURL="$2"
    shift
  else
    echo "Unknown argument: $1"
    echo "Valid options are :"
    echo "  -f : force write even if up-to-date ;"
    echo "  -d : only emit a diff from factory config ;"
    echo "  -v : only check whether files have been modified ;"
    echo "  -l : (with -v) use listing output format (no headers) ;"
    echo "  -q : suppress any message. With -v, return non-0 if unsaved changes exist ;"
    echo "  -s : dump archive to stdout instead of flash."
    echo "  -o <file> : dump archive to file instead of flash."
    echo "  -p tftp://server[:port][/file] : send archive to tftp server instead."
    exit 1
  fi
  shift
done

if [ $VERBOSE -eq 1 ]; then
  if [ -s $FILE ]; then
    if [ $QUIET -eq 1 -a $LIST -eq 0 ]; then
       if [ $(list_changes | wc -l) -eq 0 ]; then
         # nothing to save
         exit 0
       else
         # unsaved changes
         exit 1
       fi
    fi
    if [ $LIST -eq 0 ]; then
       if [ $(list_changes | wc -l) -gt 0 ]; then
         echo "List of files modified since last backup :"
         list_changes
       else
         echo "Nothing changed since last backup."
       fi
    else
      list_changes
    fi
    exit 0
  else
    [ $LIST -eq 0 ] && echo "Backup log does not exist."
    exit 1
  fi
fi

if [ $DIFF -eq 1 ]; then
  if [ $TOFILE -eq 1 ]; then
    diff_etc > "$OUTFILE"
  else
    diff_etc
  fi
  exit 0
fi

if [ $FORCE -eq 0 -a $STDOUT -eq 0 -a $TOFILE -eq 0 -a $TONET -eq 0 -a -e $FILE ] && \
  [ $(list_changes | wc -l) -eq 0 ]; then
  [ $QUIET -eq 0 ] && echo "Nothing changed since last backup. Use '-f' if you want to force."
  exit 1;
fi 

if [ $STDOUT -eq 0 -a $TOFILE -eq 0 -a $TONET -eq 0 ]; then
  mount_flash_rw || exit 1

  rm -f $FLASHCFG/config.adm 2>/dev/null
  msg=$(rm -f $FLASHCFG/config.new 2>&1)
  ret=$?
  msg=$(echo -n $msg | tr '[\000- ]' ' ')
  [ $ret = 0 ] || write_journal "1/rm" "|$msg| status: $ret"
  msg=$(touch $FLASHCFG/config.new 2>&1)
  ret=$?
  msg=$(echo -n $msg | tr '[\000- ]' ' ')
  [ $ret = 0 ] || write_journal "2/touch" "|$msg| status: $ret"
  msg=$(chmod 600 $FLASHCFG/config.new 2>&1)
  ret=$?
  msg=$(echo -n $msg | tr '[\000- ]' ' ')
  [ $ret = 0 ] || write_journal "3/chmod" "|$msg| status: $ret"

  # below, we get in msg either an error message from stderr in case of error,
  # or the file status in case of success.
  msg=$(archive_etc 2>&1 >$FLASHCFG/config.new)
  ret="$?"
  [ $ret = 0 ] && msg=$(find "$FLASHCFG/config.new" -printf "%f|%s|%T+" 2>&1)
  msg=$(echo -n $msg | tr '[\000- ]' ' ')
  write_journal "archive" "|$msg| status: $ret"
elif [ $TOFILE -eq 1 ]; then
  archive_etc > "$OUTFILE"
  exit 0
elif [ $TONET -eq 1 ]; then
  unset proto server defp port file
  unset temp_cfg_dir

  file="$OUTURL"
  [ -z "${file##*://*}" ] && proto="${file%%://*}"
  file="${file#*://}" ; proto="${proto:-tftp}"

  case "$proto" in
    tftp) defp=69 ;;
    *) die 1 "Unsupported protocol for put operation : $proto" ;;
  esac

  [ -z "${file##*/*}" ] || file="${file}/"
  server="${file%%/*}"
  if [ -n "$server" ]; then
    file="/${file#*/}"
  fi
  [ -z "${server##*:*}" ] && port="${server#*:}"
  server="${server%%:*}" ; port="${port:-$defp}"

  [ -n "${server}" ] || die 1 "Invalid network path specification: $OUTURL"
  if [ -z "${file%%*/}" ]; then
    file="${file}$(uname -n)-$(date +%Y%m%d-%H%M).bin"
    echo "Using $file as the remote file name."
  fi

  temp_cfg_dir="$(mkstemp)" || die 1 "Cannot create a temporary directory in '${TMPDIR-/tmp}'."
  OUTFILE="$temp_cfg_dir/tonet"
  archive_etc > "$OUTFILE"
  tftp "$server" "$port" -c put "$OUTFILE" "${file#/}"
  echo "Done."
  rm -rf "$temp_cfg_dir"
  exit 0
else
  archive_etc
  exit 0
fi

if [ ! -s $FLASHCFG/config.new ]; then
  rm -f $FLASHCFG/config.new
  write_journal "cancel" "4/rm empty config.new: status: $?"
  umount_flash
  [ $QUIET -eq 0 ] && echo "Problem saving config to flash."
  sync
  exit 1
fi

msg=$(mv $FLASHCFG/config.{cur,bak} 2>&1)
ret=$?
msg=$(echo -n $msg | tr '[\000- ]' ' ')
[ $ret = 0 ] || write_journal "5/mv" "config.cur->config.bak: |$msg| status: $ret"
msg=$(mv $FLASHCFG/config.{new,cur} 2>&1)
ret=$?
if [ $ret -ne 0 ]; then
  msg=$(echo -n $msg | tr '[\000- ]' ' ')
  write_journal "7/mv" "config.new->config.cur: |$msg| status: $ret"
  rm -f $FLASHCFG/config.new
  write_journal "8/rm" "rm config.new: status: $?"
  umount_flash
  [ $QUIET -eq 0 ] && echo "Problem saving config to flash."
  sync
  exit 1
fi
umount_flash
sync

( rm -f $FILE ; touch $FILE ; chmod 600 $FILE ) >/dev/null 2>&1
( flx sign --ignore-dot /etc | grep -vwF "${FILE#/}" >$FILE ) 2>/dev/null
exit 0
