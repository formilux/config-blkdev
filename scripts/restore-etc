#!/bin/bash

# This script unmounts /etc, mounts a ramfs/tmpfs onto it, and extracts
# /flash/cfg/config.{cur,bak,fac} into it. If an argument is passed, it will be
# used as a local config file and the restoration will proceed from this file.
# Note: this script checks the existence of /etc/config.rc in order to detect
# if a previous config had already been loaded.

# get out of /flash and /etc just in case.
OLDDIR="$PWD"
cd /

export PATH=/bin:/sbin:/usr/bin:/usr/sbin
FLASHDIR=/flash
FLASHCFG=${FLASHDIR}/cfg
FILE=/etc/.restored
EXCLUDE=/usr/share/factory/ignore-files
REFERENCE=/usr/share/factory/base-etc
DIFF=0
FORCE=0
FACTORY=0
VERBOSE=0
CFGFILE=
MOUNTOPT="size=2m"
FSTYPE=tmpfs
ROOTDIR=

# Mounts the flash in $FLASHDIR.
# This checks /proc/cmdline for the LAST 'flash=' statement, and
# uses its value as a /dev entry to mount it read-only into $FLASHDIR.
# Returns 0 if OK, 1 otherwise.
# DOES NOT unmounts $FLASHDIR first if previously mounted, but returns with
# an error indicating a resource access conflict.
mount_flash_ro() {
  local flash

  unset FLASH_MBR FLASH_HW FLASH_SW

  if [ -s /var/state/flash-layout.rc ]; then
    . /var/state/flash-layout.rc
  fi

  if [ -z "$FLASH_SW" ]; then
    if [ -x /sbin/mk-flash-layout ]; then
      /sbin/mk-flash-layout -k && return 0
      if [ -s /var/state/flash-layout.rc ]; then
        . /var/state/flash-layout.rc
      fi
    fi
  fi

  if [ -z "$FLASH_SW" ]; then
    flash="$(cat /proc/cmdline)"
    if [ -n "${flash##*flash=*}" ]; then
      echo "No flash device specified in /proc/cmdline." >&2
      return 1
    fi
    flash=${flash##*flash=}
    flash=${flash%% *}
    [ -n "${flash##/dev/*}" ] && flash="/dev/$flash"
  else
    flash=$FLASH_SW
  fi

  echo "Mounting ${flash} on $FLASHDIR..." >&2
  cd /
  umount -n -d $FLASHDIR >/dev/null 2>&1
  if ! mount -n -r $flash $FLASHDIR >/dev/null 2>&1; then
    echo "Error: mount failed." >&2
    return 1
  fi
  return 0
}

# unmounts /flash
umount_flash() {
  if ! umount -d $FLASHDIR >/dev/null 2>&1; then
    cd /
    if ! umount -d $FLASHDIR >/dev/null 2>&1; then
      echo "Error: cannot unmount $FLASHDIR" >&2
      return 1
    else
      echo "Warning: ${0##*/} forgot to leave $FLASHDIR before unmounting it." >&2
    fi
  fi
  return 0
}

# copies /flash/fstab to /etc if /etc/fstab is missing
copy_fstab_from_flash() {
  if [ ! -s "$ROOTDIR/etc/fstab" -a -s "$FLASHDIR/fstab" ]; then
    # missing fstab and we have one lying in /flash. This is the one we want to use.
    echo "Note: using original fstab until configuration is saved." >&2
    cp $FLASHDIR/fstab "$ROOTDIR/etc/fstab" && chown root:adm "$ROOTDIR/etc/fstab" && chmod 640 "$ROOTDIR/etc/fstab"
  fi
}

# creates a secure empty temporary directory and returns its full path name.
# Returns 0 if it succeeds, with the name on stdout, otherwise returns 1.
mkstemp() {
  local name attempts=10
  while [ $attempts -gt 0 ]; do
    name="${TMPDIR-/tmp}/$$.$RANDOM.$attempts"
    if mkdir -m 0700 $name >/dev/null 2>/dev/null; then
      echo "$name"
      return 0
    fi
    rmdir $name >/dev/null 2>/dev/null
    ((attempts--))
  done
  return 1
}

# Checks what has changed since last backup. We need to use 'tar cf' because
# we want to benefit from tar's ability to exclude files from another file.
# The changed files are listed on stdout, relative to /.
# WARNING! because it uses tar, it does not detect removed files.
list_changes() {
  if [ -r "$ROOTDIR$FILE" ]; then
    flx check --ignore-dot --ignore-link --ignore-date file:"$ROOTDIR$FILE" fs:"$ROOTDIR/etc"=etc \
      | awk '/^[+>]/ { print $9 }' \
      | tar -C "$ROOTDIR/" -T - --one-file-system --numeric-owner --no-recursion --exclude-from $EXCLUDE -cvf /dev/null 2>/dev/null
  else
      tar -C "$ROOTDIR/" --one-file-system --numeric-owner --exclude-from $EXCLUDE -cvf /dev/null etc 2>/dev/null
  fi
}

# tries to unmount /etc
unmount_etc() {
  while umount "$ROOTDIR/etc" >/dev/null 2>&1; do : ; done
}

# mount /etc unless config.rc already exists
mount_etc() {
  if [ ! -e "$ROOTDIR/etc/config.rc" ]; then
    mount -n -t $FSTYPE ${MOUNTOPT:+-o $MOUNTOPT} "$ROOTDIR/etc" "$ROOTDIR/etc" || \
      mount -n -t $FSTYPE "$ROOTDIR/etc" "$ROOTDIR/etc"
  fi
}

# restore only the factory configuration over /etc
reinstall_factory_etc() {
  (tar -C $REFERENCE --one-file-system -cf - . | tar -C "$ROOTDIR/etc" -xf -) >/dev/null 2>&1
}

# rebuild the signature file after /etc has been restored
update_signature_file() {
  ( rm -f "$ROOTDIR"/etc/blkid.tab{,.old}; \
    rm -f "$ROOTDIR$FILE" ; touch "$ROOTDIR$FILE" ; chmod 600 "$ROOTDIR$FILE"; \
    flx sign --ignore-dot "$ROOTDIR/etc"=etc | grep -vwF "${FILE#/}" >"$ROOTDIR$FILE" ) >/dev/null 2>&1
}

# try to restore file $1 to /etc. If "$1" is "-", stdin is used via a temporary
# directory.
try_restore_config() {
  local temp_cfg_dir
  local config="$1"

  if [ "$config" = "-" ]; then
    # restore from stdin
    temp_cfg_dir="$(mkstemp)"
    if [ $? -ne 0 ]; then
      echo "Cannot create a temporary directory in '${TMPDIR-/tmp}'." >&2
      return 1
    fi
    config="$temp_cfg_dir/stdin"
    cat > "$temp_cfg_dir/stdin"
  fi

  if [ -s "$config" ] && [ $(tar ztf "$config" 2>/dev/null|wc -l) -gt 0 ]; then
    if [ $DIFF -ne 1 ]; then
      unmount_etc
      mount_etc
    fi
    reinstall_factory_etc
    # first, we want to remove all directories from /etc which are replaced
    # by something not a directory in the archive (typically a symlink). Directories
    # in the file must not be removed since they may carry only few files.
    tar --exclude-from $EXCLUDE -ztf "$config" etc/ | grep -v '/$' | tr '\012' '\000' | (cd "$ROOTDIR/" && xargs -r0 rm -rf) 2>&1
    tar -C "$ROOTDIR/etc" --exclude-from $EXCLUDE --strip-components=1 -zxf "$config" >/dev/null 2>&1
    if [ $? -eq 0 -a -s "$ROOTDIR/etc/config.rc" ]; then
      update_signature_file
      echo "Loading $config" >&2
      [ -n "$temp_cfg_dir" ] && rm -rf "$temp_cfg_dir"
      return 0
    fi
    [ $DIFF -eq 1 ] || unmount_etc
  fi
  [ -n "$temp_cfg_dir" ] && rm -rf "$temp_cfg_dir"
  rm -f "$ROOTDIR"/etc/blkid.tab{,.old} >/dev/null 2>&1
  return 1
}

# restore everything taking into account the command line options.
restore_config() {
  local must_unmount=0

  # restore factory settings only ?
  if [ $FACTORY -eq 1 ]; then
    if [ $DIFF -ne 1 ]; then
      unmount_etc
      mount_etc
    fi
    reinstall_factory_etc
    update_signature_file
    return 0
  fi

  # restore from local file ?
  if [ -n "$CFGFILE" ]; then
    try_restore_config "$CFGFILE"
    return $?
  fi

  # if we get any error there, we try to restore the flash configuration.
  if mount_flash_ro; then
    must_unmount=1
    for config in $FLASHCFG/config.cur $FLASHCFG/config.bak $FLASHCFG/config.fac
    do
      if try_restore_config "$config"; then
        copy_fstab_from_flash
        umount_flash
        return 0
      fi
    done
  fi

  # We have not found any config, so we'll build /etc from the reference etc
  # directory into a ramfs/tmpfs anyway so that we get a read/write /etc.
  if [ $DIFF -ne 1 ]; then
    unmount_etc
    mount_etc
  fi
  reinstall_factory_etc
  copy_fstab_from_flash >/dev/null 2>&1
  update_signature_file

  [ $must_unmount -eq 0 ] || umount_flash
  return 1
}

#### main entry point

if ! grep -wq tmpfs /proc/filesystems 2>/dev/null; then
  FSTYPE=ramfs
fi

while [ $# -gt 0 ]; do
  if [ ".$1" = ".-f" ]; then FORCE=1
  elif [ ".$1" = ".-d" ]; then DIFF=1
  elif [ ".$1" = ".-F" ]; then FACTORY=1
  elif [ ".$1" = ".-v" ]; then VERBOSE=1
  elif [ ".$1" = ".-t" ]; then FSTYPE="$2"; shift
  elif [ ".$1" = ".-o" ]; then MOUNTOPT="$2"; shift
  elif [ "${1}" != "-" -a -z "${1##-*}" ]; then
    echo "Unknown argument: $1"
    echo "Valid options are :"
    echo "  -F : restore config to factory settings only ;"
    echo "  -d : only emit a diff between flash and running config ;"
    echo "  -f : force update and ignore local changes ;"
    echo "  -v : only check whether files have been modified ;"
    echo "  -t <fstype> : force to use a filesystem of this type ;"
    echo "  -o <opts>   : use these mount options (default: $MOUNTOPT) ;"
    echo "  <file> : restore from this file instead of flash. Use '-' for stdin."
    exit 1
  else
    break
  fi
  shift
done

if [ $# -gt 0 ]; then
  CFGFILE="$1"
  [ -n "${CFGFILE##/*}" -a "${CFGFILE}" != "-" ] && CFGFILE="$OLDDIR/$CFGFILE"
  shift
fi

if [ $VERBOSE -eq 1 ]; then
  echo "List of files modified since last backup."
  rm -f "$ROOTDIR"/etc/blkid.tab{,.old} 2>/dev/null
  flx check --ignore-dot file:"$ROOTDIR$FILE" fs:"$ROOTDIR/etc"=etc | grep -vwF "${FILE#/}"
  exit 0
fi

if [ $DIFF -eq 0 -a $FORCE -eq 0 -a -e "$ROOTDIR$FILE" ] && \
   [ $(list_changes | wc -l) -gt 0 ]; then
  echo "Some files have changed since last backup. Check them with '-v' or use '-f'."
  exit 1;
fi 

if [ $DIFF -eq 1 ]; then
  ROOTDIR="$(mkstemp)" && mkdir -p "$ROOTDIR/etc"
  if [ $? -ne 0 ]; then
    echo "Cannot create a temporary directory in '${TMPDIR-/tmp}'." >&2
    exit 1
  fi
  restore_config

  flx check --ignore-dot --ignore-link --ignore-date "$ROOTDIR"/etc=etc /etc=etc \
    | awk '/^[+>]/ { print $9 }' \
    | tar -C / -T - --one-file-system --numeric-owner --no-recursion --exclude-from $EXCLUDE -cf - \
    | tar tf - \
    | while read; do diff -puN "$ROOTDIR/etc"${REPLY#etc} /etc${REPLY#etc}; done

  # remove the temporary dir. Better add some checks to avoid a dangerous
  # reuse of this code our of context...
  [ -n "$ROOTDIR" -a "$ROOTDIR" != "/" ] && rm -rf "$ROOTDIR"
  exit 0
fi

restore_config
exit $?
